module RootsForwardDiffExt

using Roots
using ForwardDiff
import ForwardDiff: Dual, value, partials

# For ForwardDiff we add a `solve` method for Dual types
function Roots.solve(ZP::ZeroProblem,
               M::Roots.AbstractUnivariateZeroMethod,
               ùê©::Union{Dual{T},
                        AbstractArray{<:Dual{T,<:Real}}
                        };
               kwargs...) where {T}
    f = ZP.F
    p·µ• = value.(ùê©)

    x·µÖ = solve(ZP, M, p·µ•; kwargs...)
    ùê±·µÖ = Dual{T}(x·µÖ, one(x·µÖ))

    f‚Çì = partials(f(ùê±·µÖ, p·µ•), 1)
    f‚Çö = partials(f(x·µÖ, ùê©))

    Dual{T}(x·µÖ, - f‚Çö / f‚Çì)
end

end
